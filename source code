import cv2
import numpy as np
import pyautogui

# Define the range for detecting the red color in HSV
lower_red = np.array([0, 120, 70])
upper_red = np.array([10, 255, 255])

cap = cv2.VideoCapture(0)  # Open the webcam
screen_width, screen_height = pyautogui.size()

prev_x, prev_y = 0, 0  # Stores previous mouse position
frame_counter = 0  # For skipping frames to improve speed

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_counter += 1
    if frame_counter % 3 != 0:  # Skip frames for better performance
        continue  

    frame = cv2.resize(frame, (320, 240))  # Reduce frame size for speed
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)  # Convert to HSV color space
    mask = cv2.inRange(hsv, lower_red, upper_red)  # Detect red color

    # Find contours of the red object
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(largest_contour)

        # Convert camera coordinates to screen coordinates
        screen_x = np.interp(x + w // 2, [0, frame.shape[1]], [0, screen_width])
        screen_y = np.interp(y + h // 2, [0, frame.shape[0]], [0, screen_height])

        # Smooth movement
        smooth_x = (prev_x * 0.7) + (screen_x * 0.3)
        smooth_y = (prev_y * 0.7) + (screen_y * 0.3)

        pyautogui.moveTo(smooth_x, smooth_y)  # Move the mouse
        prev_x, prev_y = smooth_x, smooth_y  # Update previous position

    # Show the mask for debugging
    cv2.imshow("Mouse Control", mask)
    if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to exit
        break

cap.release()
cv2.destroyAllWindows()
